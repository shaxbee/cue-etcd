// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go gitlab.agodadev.io/fleet/etcd/api/v1

package v1

import (
	"k8s.io/apimachinery/pkg/api/resource"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#ClusterPhase: string

#MemberRole: string

// EtcdClusterSpec defines the desired state of EtcdCluster
#EtcdClusterSpec: {
	// +kubebuilder:default=1
	replicas?: int @go(Replicas)

	// +kubebuilder:default=v3.5.7
	version: string      @go(Version)
	backup?: #BackupSpec @go(Backup)

	// RuntimeClassName is the pod's runtime class
	runtimeClassName?: null | string @go(RuntimeClassName,*string)

	// StorageClassName is the persistent volume's storage class
	storageClassName?: null | string @go(StorageClassName,*string)

	// StorageMedium=Memory creates emptyDir volume on tmpfs
	// +kubebuilder:default=""
	storageMedium?: string @go(StorageMedium)

	// StorageQuota sets a size limit on storage
	// +kubebuilder:default="4G"
	storageQuota?: resource.#Quantity @go(StorageQuota)

	// Compute Resources required by each member of cluster.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	resources?: corev1.#ResourceRequirements @go(Resources)
}

// EtcdClusterStatus defines the observed state of EtcdCluster
#EtcdClusterStatus: {
	// Lifecycle phase
	// +kubebuilder:default=Pending
	phase:   #ClusterPhase @go(Phase)
	backup?: #BackupStatus @go(Backup)

	// Replicas is the number of non-terminated members.
	// +kubebuilder:default=0
	replicas: int @go(Replicas)

	// ReadyReplicas is the number of ready member pods.
	// +kubebuilder:default=0
	readyReplicas: int @go(ReadyReplicas)

	// AvailableReplicas is the number of fully provisioned members.
	// +kubebuilder:default=0
	availableReplicas: int @go(AvailableReplicas)

	// +kubebuilder:default=0
	learnerReplicas: int @go(LearnerReplicas)

	// OutdatedReplicas is the number of members that are out-of-sync with cluster spec
	// +kubebuilder:default=0
	outdatedReplicas: int @go(OutdatedReplicas)

	// Version is the observed version of etcd cluster
	version?: string @go(Version)

	// Endpoint is the etcd client endpoint
	endpoint?: string @go(Endpoint)

	// SecretName is the name of the secret containing the etcd client certificate
	secretName?: string @go(SecretName)

	// Latest service status of cluster
	// +listType=map
	// +listMapKey=type
	// +optional
	conditions?: [...#ClusterCondition] @go(Conditions,[]ClusterCondition)

	// Members is the status of each cluster member.
	// +listType=map
	// +listMapKey=name
	// +optional
	members?: [...#MemberStatus] @go(Members,[]MemberStatus)
}

#BackupStatus: {
	enabled:             bool         @go(Enabled)
	lastSuccessfulTime?: metav1.#Time @go(LastSuccessfulTime)
	lastScheduleTime?:   metav1.#Time @go(LastScheduleTime)
}

#ClusterCondition: {
	type:                #ClusterConditionType   @go(Type)
	status:              corev1.#ConditionStatus @go(Status)
	lastTransitionTime?: metav1.#Time            @go(LastTransitionTime)
	reason?:             string                  @go(Reason)
	message?:            string                  @go(Message)
}

#ClusterConditionType: string // #enumClusterConditionType

#enumClusterConditionType:
	#ClusterAvailable |
	#ClusterScaling |
	#ClusterUpgrading |
	#ClusterBackup

#ClusterAvailable: #ClusterConditionType & "Available"
#ClusterScaling:   #ClusterConditionType & "Scaling"
#ClusterUpgrading: #ClusterConditionType & "Upgrading"
#ClusterBackup:    #ClusterConditionType & "Backup"

// MemberStatus defines the observed state of EtcdCluster member
#MemberStatus: {
	name:              string      @go(Name)
	ready:             bool        @go(Ready)
	available:         bool        @go(Available)
	id?:               string      @go(ID)
	role?:             #MemberRole @go(Role)
	endpoint?:         string      @go(Endpoint)
	version?:          string      @go(Version)
	dbsize?:           int64       @go(DBSize)
	raftterm?:         uint64      @go(RaftTerm)
	raftindex?:        uint64      @go(RaftIndex)
	raftappliedindex?: uint64      @go(RaftAppliedIndex)
	errors?: [...string] @go(Errors,[]string)
}

// EtcdCluster is the Schema for the etcdclusters API
#EtcdCluster: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #EtcdClusterSpec   @go(Spec)
	status?:   #EtcdClusterStatus @go(Status)
}

// EtcdClusterList contains a list of EtcdCluster
#EtcdClusterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EtcdCluster] @go(Items,[]EtcdCluster)
}
